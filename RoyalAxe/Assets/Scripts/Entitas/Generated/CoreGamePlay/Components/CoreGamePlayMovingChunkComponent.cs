//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class CoreGamePlayEntity {

    public RoyalAxe.GameEntitas.MovingChunkComponent movingChunk { get { return (RoyalAxe.GameEntitas.MovingChunkComponent)GetComponent(CoreGamePlayComponentsLookup.MovingChunk); } }
    public bool hasMovingChunk { get { return HasComponent(CoreGamePlayComponentsLookup.MovingChunk); } }

    public void AddMovingChunk(float newYEndPoint) {
        var index = CoreGamePlayComponentsLookup.MovingChunk;
        var component = (RoyalAxe.GameEntitas.MovingChunkComponent)CreateComponent(index, typeof(RoyalAxe.GameEntitas.MovingChunkComponent));
        component.YEndPoint = newYEndPoint;
        AddComponent(index, component);
    }

    public void ReplaceMovingChunk(float newYEndPoint) {
        var index = CoreGamePlayComponentsLookup.MovingChunk;
        var component = (RoyalAxe.GameEntitas.MovingChunkComponent)CreateComponent(index, typeof(RoyalAxe.GameEntitas.MovingChunkComponent));
        component.YEndPoint = newYEndPoint;
        ReplaceComponent(index, component);
    }

    public void RemoveMovingChunk() {
        RemoveComponent(CoreGamePlayComponentsLookup.MovingChunk);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class CoreGamePlayMatcher {

    static Entitas.IMatcher<CoreGamePlayEntity> _matcherMovingChunk;

    public static Entitas.IMatcher<CoreGamePlayEntity> MovingChunk {
        get {
            if (_matcherMovingChunk == null) {
                var matcher = (Entitas.Matcher<CoreGamePlayEntity>)Entitas.Matcher<CoreGamePlayEntity>.AllOf(CoreGamePlayComponentsLookup.MovingChunk);
                matcher.componentNames = CoreGamePlayComponentsLookup.componentNames;
                _matcherMovingChunk = matcher;
            }

            return _matcherMovingChunk;
        }
    }
}
