//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class CoreGamePlayContext {

    public CoreGamePlayEntity levelWaveEntity { get { return GetGroup(CoreGamePlayMatcher.LevelWave).GetSingleEntity(); } }

    public bool isLevelWave {
        get { return levelWaveEntity != null; }
        set {
            var entity = levelWaveEntity;
            if (value != (entity != null)) {
                if (value) {
                    CreateEntity().isLevelWave = true;
                } else {
                    entity.Destroy();
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class CoreGamePlayEntity {

    static readonly RoyalAxe.GameEntitas.LevelWaveComponent levelWaveComponent = new RoyalAxe.GameEntitas.LevelWaveComponent();

    public bool isLevelWave {
        get { return HasComponent(CoreGamePlayComponentsLookup.LevelWave); }
        set {
            if (value != isLevelWave) {
                var index = CoreGamePlayComponentsLookup.LevelWave;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : levelWaveComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class CoreGamePlayMatcher {

    static Entitas.IMatcher<CoreGamePlayEntity> _matcherLevelWave;

    public static Entitas.IMatcher<CoreGamePlayEntity> LevelWave {
        get {
            if (_matcherLevelWave == null) {
                var matcher = (Entitas.Matcher<CoreGamePlayEntity>)Entitas.Matcher<CoreGamePlayEntity>.AllOf(CoreGamePlayComponentsLookup.LevelWave);
                matcher.componentNames = CoreGamePlayComponentsLookup.componentNames;
                _matcherLevelWave = matcher;
            }

            return _matcherLevelWave;
        }
    }
}
