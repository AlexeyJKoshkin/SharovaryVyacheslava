//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameRootLoopContext {

    public GameRootLoopEntity mainLoopStateEntity { get { return GetGroup(GameRootLoopMatcher.MainLoopState).GetSingleEntity(); } }
    public RoyalAxe.GameEntitas.MainLoopStateComponent mainLoopState { get { return mainLoopStateEntity.mainLoopState; } }
    public bool hasMainLoopState { get { return mainLoopStateEntity != null; } }

    public GameRootLoopEntity SetMainLoopState(Core.Launcher.IProjectSceneState newState) {
        if (hasMainLoopState) {
            throw new Entitas.EntitasException("Could not set MainLoopState!\n" + this + " already has an entity with RoyalAxe.GameEntitas.MainLoopStateComponent!",
                "You should check if the context already has a mainLoopStateEntity before setting it or use context.ReplaceMainLoopState().");
        }
        var entity = CreateEntity();
        entity.AddMainLoopState(newState);
        return entity;
    }

    public void ReplaceMainLoopState(Core.Launcher.IProjectSceneState newState) {
        var entity = mainLoopStateEntity;
        if (entity == null) {
            entity = SetMainLoopState(newState);
        } else {
            entity.ReplaceMainLoopState(newState);
        }
    }

    public void RemoveMainLoopState() {
        mainLoopStateEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameRootLoopEntity {

    public RoyalAxe.GameEntitas.MainLoopStateComponent mainLoopState { get { return (RoyalAxe.GameEntitas.MainLoopStateComponent)GetComponent(GameRootLoopComponentsLookup.MainLoopState); } }
    public bool hasMainLoopState { get { return HasComponent(GameRootLoopComponentsLookup.MainLoopState); } }

    public void AddMainLoopState(Core.Launcher.IProjectSceneState newState) {
        var index = GameRootLoopComponentsLookup.MainLoopState;
        var component = (RoyalAxe.GameEntitas.MainLoopStateComponent)CreateComponent(index, typeof(RoyalAxe.GameEntitas.MainLoopStateComponent));
        component.State = newState;
        AddComponent(index, component);
    }

    public void ReplaceMainLoopState(Core.Launcher.IProjectSceneState newState) {
        var index = GameRootLoopComponentsLookup.MainLoopState;
        var component = (RoyalAxe.GameEntitas.MainLoopStateComponent)CreateComponent(index, typeof(RoyalAxe.GameEntitas.MainLoopStateComponent));
        component.State = newState;
        ReplaceComponent(index, component);
    }

    public void RemoveMainLoopState() {
        RemoveComponent(GameRootLoopComponentsLookup.MainLoopState);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameRootLoopMatcher {

    static Entitas.IMatcher<GameRootLoopEntity> _matcherMainLoopState;

    public static Entitas.IMatcher<GameRootLoopEntity> MainLoopState {
        get {
            if (_matcherMainLoopState == null) {
                var matcher = (Entitas.Matcher<GameRootLoopEntity>)Entitas.Matcher<GameRootLoopEntity>.AllOf(GameRootLoopComponentsLookup.MainLoopState);
                matcher.componentNames = GameRootLoopComponentsLookup.componentNames;
                _matcherMainLoopState = matcher;
            }

            return _matcherMainLoopState;
        }
    }
}
