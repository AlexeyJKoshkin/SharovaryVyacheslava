//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameRootLoopEntity {

    public RoyalAxe.GameEntitas.UpdateSystemsComponent updateSystems { get { return (RoyalAxe.GameEntitas.UpdateSystemsComponent)GetComponent(GameRootLoopComponentsLookup.UpdateSystems); } }
    public bool hasUpdateSystems { get { return HasComponent(GameRootLoopComponentsLookup.UpdateSystems); } }

    public void AddUpdateSystems(Feature[] newCollection) {
        var index = GameRootLoopComponentsLookup.UpdateSystems;
        var component = (RoyalAxe.GameEntitas.UpdateSystemsComponent)CreateComponent(index, typeof(RoyalAxe.GameEntitas.UpdateSystemsComponent));
        component.Collection = newCollection;
        AddComponent(index, component);
    }

    public void ReplaceUpdateSystems(Feature[] newCollection) {
        var index = GameRootLoopComponentsLookup.UpdateSystems;
        var component = (RoyalAxe.GameEntitas.UpdateSystemsComponent)CreateComponent(index, typeof(RoyalAxe.GameEntitas.UpdateSystemsComponent));
        component.Collection = newCollection;
        ReplaceComponent(index, component);
    }

    public void RemoveUpdateSystems() {
        RemoveComponent(GameRootLoopComponentsLookup.UpdateSystems);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameRootLoopMatcher {

    static Entitas.IMatcher<GameRootLoopEntity> _matcherUpdateSystems;

    public static Entitas.IMatcher<GameRootLoopEntity> UpdateSystems {
        get {
            if (_matcherUpdateSystems == null) {
                var matcher = (Entitas.Matcher<GameRootLoopEntity>)Entitas.Matcher<GameRootLoopEntity>.AllOf(GameRootLoopComponentsLookup.UpdateSystems);
                matcher.componentNames = GameRootLoopComponentsLookup.componentNames;
                _matcherUpdateSystems = matcher;
            }

            return _matcherUpdateSystems;
        }
    }
}
